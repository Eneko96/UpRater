#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "Running commit-msg hook"
commit="$(cat $1)"
echo $commit
branch=$(git rev-parse --abbrev-ref HEAD)
kind=$(echo $branch| cut -d '/' -f1)
echo $kind

case $branch in
    "feature"*)
        echo "Feature branch"
        finalCommit="feat: $commit"
        printf "[FEAT] - $commit" > $1
        ;;
    "bugfix"*)
        echo "Bugfix branch"
        ;;
    "hotfix"*)
        echo "Hotfix branch"
        ;;
    "release"*)
        echo "Release branch"
        ;;
    "support"*)
        echo "Support branch"
        ;;
    "chore"*)
        echo "Chore branch"
        ;;
    "docs"*)
        echo "Docs branch"
        ;;
    "test"*)
        echo "Test branch"
        ;;
    "refactor"*)
        echo "Refactor branch"
        ;;
    "style"*)
        echo "Style branch"
        ;;
    "ci"*)
        echo "CI branch"
        ;;
    "perf"*)
        echo "Perf branch"
        ;;
    "revert"*)
        echo "Revert branch"
        ;;
    "wip"*)
        echo "WIP branch"
        ;;
    *)
        echo "Invalid branch name"
        exit 1
        ;;
esac
echo "Commit message: $commit"
exit 125

# exec < /dev/tty

# read -p 'Before creating the commit, what kind?

# [MAJOR=2]
# [MINOR=1]
# [PATCH=0]
# [PREMAJOR=3]
# [PREMINOR=4]
# [PREPATCH=5]
# [NIL=6]
# ' yn

# case $yn in
#     [0]* ) echo "Patch" | npm version patch;;
#     [1]* ) echo "Minor" | npm version minor;;
#     [2]* ) echo "Major" | npm version major;;
#     [3]* ) echo "Prepatch" | npm version prepatch;;
#     [4]* ) echo "Preminor" | npm version preminor;;
#     [5]* ) echo "Premajor" | npm version premajor;;
#     [6]* ) echo "No version will be upgraded";;
#     * ) echo "Please answer a valid answer [0,1,2,3,4,5].";;
# esac
